// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files from any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Altera Program License
// Subscription Agreement, Altera MegaCore Function License
// Agreement, or other applicable license agreement, including,
// without limitation, that your use is for the sole purpose of
// programming logic devices manufactured by Altera and sold by
// Altera or its authorized distributors.  Please refer to the
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to
// suit user's needs .Comments are provided in each section to help the user
// fill out necessary details.
// *****************************************************************************
// Generated on "12/24/2018 15:58:40"

// Verilog Test Bench template for design : gcd
//
// Simulation tool : ModelSim-Altera (Verilog)
//

`timescale 1 ps/ 1 ps
module gcd_test();
// constants
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg go;
reg rst_n;
reg [3:0] xin;
reg [3:0] yin;
// wires
wire [3:0]  gcdreg;

// assign statements (if any)
gcd i1 (
// port map - connection between master ports and signals/registers
	.clk(clk),
	.gcdreg(gcdreg),
	.go(go),
	.rst_n(rst_n),
	.xin(xin),
	.yin(yin)
);
initial
begin
	clk = 0;
	rst_n = 0;
	go = 1;
	#200;
	rst_n = 1;
	#200;
	xin = 4'd0;
	yin = 4'd0;
$display("Running testbench");
	#20000;
	$stop;
end


always
begin
	#20
		clk = 0;
	#20
		clk = 1;
end

always
// optional sensitivity list
// @(event1 or event2 or .... eventn)
begin
	#200;
	if(xin < 4'd16)
		xin = xin + 1;
	else
	begin
		xin = 0;
		if(yin < 4'd16)
			yin = yin + 1;
		else
			yin = 0;
	end
	$display("x: %d, y: %d\n", xin, yin);
end

@eachvec;
// --> end
end
endmodule

